scale_y_reverse()+
scale_x_reverse()+
coord_fixed()
ggplot(df,aes(x=df$x,y=df$y))+ scale_y_reverse()+
scale_x_reverse()+
coord_fixed()
a1 <- A1
class(a1)
typeof(a1)
head(A1) %>% kable
View(A1)
ggplot(df,aes(x=df$x,y=df$y))+ geom_path(aes(group = 1), arrow = arrow())+
scale_y_reverse()+
scale_x_reverse()+
coord_fixed()
ggplot(df,aes(x=df$x,y=df$y))+ geom_path(aes(group = 2), arrow = arrow())+
scale_y_reverse()+
scale_x_reverse()+
coord_fixed()
ggplot(df,aes(x=df$x,y=df$y))+ geom_path(aes(group = 2), arrow = arrow())+
scale_y_reverse()+
scale_x_reverse()+
coord_fixed()
ggplot(df,aes(x=df$x,y=df$y))+ geom_path(aes(group = 2), arrow = arrow())+
scale_y_reverse()+
scale_x_reverse()+
coord_fixed()+
ggplot(df,aes(x=df$x,y=df$y))+ geom_path(aes(group = 2), arrow = arrow())+
scale_y_reverse()+
scale_x_reverse()+
coord_fixed()+lwd=3
ggplot(df,aes(x=df$x,y=df$y))+ geom_path(aes(group = 2), arrow = arrow())+
scale_y_reverse()+
scale_x_reverse()+
coord_fixed()+lwd(3)
ggplot(df,aes(x=df$x,y=df$y))+ geom_path(aes(group = 2), arrow = arrow())+
scale_y_reverse()+
scale_x_reverse()+
coord_fixed()+geom_line(color="red")
ggplot(df,aes(x=df$x,y=df$y))+ geom_line(aes(group = 2), arrow = arrow())+
scale_y_reverse()+
scale_x_reverse()+
coord_fixed()
ggplot(df,aes(x=df$x,y=df$y))+ geom_point(aes(group = 2), arrow = arrow())+
scale_y_reverse()+
scale_x_reverse()+
coord_fixed()
ggplot(df,aes(x=df$x,y=df$y))+ geom_path(aes(group = 2), arrow = arrow())+
scale_y_reverse()+
scale_x_reverse()+
coord_fixed()
p <- ggplot(data = df,aes(x=x,y=y,group = 1))
p
p + geom_point()
p + geom_line()
p + geom_curve()
p + geom_segment()
p + geom_step()
p
geom_area()
p + geom_area()
p + geom_path(aes(colour="green"))
p + geom_path(aes(colour="green",size=3))
p + geom_path(aes(colour="green",size=1))
p + geom_path(aes(colour="green",size=1,lineend = "round"))
p + geom_path(aes(colour="green",size=1))
View(A1)
A1@sp@bbox
A1@sp@proj4string
A1@data$ones
A1@connections$distance
plot(A1,df$y)
plot(df$x,df$y)
head(A1)
library("TrajDataMining", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
library("xts", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
library("spacetime", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
library("sp", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
library("RPostgreSQL", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
library("rgdal", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
library("devtools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
devtools::check()
devtools::check()
A1
plot(A1)
spacetime::stplot(tracksCollection)
stplot(tracksCollection)
sp
trajectories::plot(tracksCollection)
stplot
stplot(tracksCollection)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::check()
install.packages("gridGraphics")
df
df
library("gridExtra", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
library("gridGraphics", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
ggplot(df,aes(x,y))+geom_path(aes(group = 1), arrow = arrow())+
scale_y_reverse()+
scale_x_reverse()+
coord_fixed()
ggplot(df,aes(x=x,y=y))+geom_path(aes(group = 1), arrow = arrow())+
scale_y_reverse()+
scale_x_reverse()+
coord_fixed()
library("ggplot2", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
library("ggplot2", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
ggplot(df,aes(x=x,y=y))+geom_path(aes(group = 1), arrow = arrow())+
scale_y_reverse()+
scale_x_reverse()+
coord_fixed()
plot(A1)
ggplot(df,aes(x=y,y=x))+geom_path(aes(group = 1), arrow = arrow())+
scale_y_reverse()+
scale_x_reverse()+
coord_fixed()
ggplot(df,aes(x=x,y=y))+geom_path(aes(group = 1), arrow = arrow())+
scale_y_reverse()+
scale_x_reverse()+
coord_fixed()
df <- data.frame(x=A1@sp@coords[,1],y=A1@sp@coords[,2],time=A1@time,dist =A1@connections$distance)
df <- data.frame(x=A1@sp@coords[,1],y=A1@sp@coords[,2],time=A1@time+1,dist =A1@connections$distance)
nrow(1)
nrow(A1)
nrow(A1@sp[,2])
nrow(A1@sp[,1])
nrow(A1@sp)
nrow(A1@sp@coords)
nrow(A1@connections$distance)
View(A1@connections$dis)
View(A1@connections$distance)
ggplot(df,aes(y=y,x=x))+geom_path(aes(group = 1), arrow = arrow())+
scale_y_reverse()+
scale_x_reverse()+
coord_fixed()
ggplot(df,aes(y=y,x=x))+geom_path(aes(group = 1), arrow = arrow())+
scale_x_reverse()+
scale_y_reverse()+
coord_fixed()
ggplot(df,aes(y=x,x=y))+geom_path(aes(group = 1), arrow = arrow())+
scale_x_reverse()+
scale_y_reverse()+
coord_fixed()
View(A1)
A1@sp
A1[,1]
A1[,2]
A1[1,]
A1
head(A1)
ggplot(A1,aes(x=A1@sp@coords[,1],y=A1@sp@coords[,2]))+geom_path(aes(group = 1), arrow = arrow())+
scale_x_reverse()+
scale_y_reverse()+
coord_fixed()
ggplot(df,aes(x=df$x,y=df$y))+geom_path(aes(group = 1), arrow = arrow())+
scale_x_reverse()+
scale_y_reverse()+
coord_fixed()
plot(df$x,df$y,col="red",lwd=3)
ggplot(df,aes(x=df$x,y=df$y))+geom_path(aes(group = 1), arrow = arrow())+
scale_x_reverse()+
scale_y_reverse()
ggplot(df,aes(x=df$x,y=df$y))+geom_path(aes(group = 1), arrow = arrow())
ggplot(df,aes(x=df$x,y=df$y))+geom_path(aes(group = 1), arrow = arrow())+ggtitle("elephant sea Trajectory")
ggplot(df,aes(x=df$x,y=df$y))+geom_path(aes(group = 1), arrow = arrow())+ggtitle("elephant sea Trajectory")+xlab("lat")+ ylab("long")
ggplot(df,aes(x=df$x,y=df$y))+geom_path(aes(group = 1), arrow = arrow())+ggtitle("elephant sea Trajectory")+xlab("X")+ ylab("Y")
ggplot(df,aes(x=df$x,y=df$y))+geom_path(aes(group = 1), arrow = arrow())+ggtitle("elephant sea Trajectory")+xlab("X")+ ylab("Y")+theme_classic()
ggplot(df,aes(x=df$x,y=df$y))+geom_path(aes(group = 1), arrow = arrow())+ggtitle("elephant sea Trajectory")+xlab("X")+ ylab("Y")+theme_dark()
ggplot(df,aes(x=df$x,y=df$y))+geom_path(aes(group = 1), arrow = arrow())+ggtitle("elephant sea Trajectory")+xlab("X")+ ylab("Y")+theme_light()
ggplot(df,aes(x=df$x,y=df$y))+geom_path(aes(group = 1), arrow = arrow())+ggtitle("elephant sea Trajectory")+xlab("X")+ ylab("Y")+theme_linedraw()
ggplot(df,aes(x=df$x,y=df$y))+geom_path(aes(group = 1), arrow = arrow())+ggtitle("elephant sea Trajectory")+xlab("X")+ ylab("Y")+theme_bw()
ggplot(df,aes(x=df$x,y=df$y))+geom_path(aes(group = 1), arrow = arrow())+ggtitle("elephant sea Trajectory")+xlab("X")+ ylab("Y")+theme_dark()
ggplot(df,aes(x=df$x,y=df$y))+geom_path(aes(group = 1), arrow = arrow())+ggtitle("elephant sea Trajectory")+xlab("X")+ ylab("Y")+theme_get()
ggplot(df,aes(x=df$x,y=df$y))+geom_path(aes(group = 1), arrow = arrow())+ggtitle("elephant sea Trajectory")+xlab("X")+ ylab("Y")+theme_minimal()
ggplot(df,aes(x=df$x,y=df$y))+geom_path(aes(group = 1), arrow = arrow())+ggtitle("elephant sea Trajectory")+xlab("X")+ ylab("Y")+theme_void()
ggplot(df,aes(x=df$x,y=df$y))+geom_path(aes(group = 1), arrow = arrow())+ggtitle("elephant sea Trajectory")+xlab("X")+ ylab("Y")+theme_replace()
ggplot(df,aes(x=df$x,y=df$y))+geom_path(aes(group = 1), arrow = arrow())+ggtitle("elephant sea Trajectory")+xlab("X")+ ylab("Y")+theme_replace()
ggplot(df,aes(x=df$x,y=df$y))+geom_path(aes(group = 1), arrow = arrow())+ggtitle("elephant sea Trajectory")+xlab("X")+ ylab("Y")+theme_gray()
ggplot(df,aes(x=df$x,y=df$y))+geom_path(aes(group = 1), arrow = arrow())+ggtitle("elephant sea Trajectory")+xlab("X")+ ylab("Y")+theme_classic()
ggplot(df,aes(x=df$x,y=df$y))+geom_path(aes(group = 1), arrow = arrow())+ggtitle("elephant sea Trajectory")+xlab("X")+ ylab("Y")+theme_classic()+colours("red")
ggplot(df,aes(x=df$x,y=df$y,colors("red")))+geom_path(aes(group = 1), arrow = arrow())+ggtitle("elephant sea Trajectory")+xlab("X")+ ylab("Y")+theme_classic()
ggplot(df,aes(x=df$x,y=df$y)+geom_path(aes(group = 1), arrow = arrow())+ggtitle("elephant sea Trajectory")+xlab("X")+ ylab("Y")+theme_classic()
ggplot(df,aes(x=df$x,y=df$y))+geom_path(aes(group = 1), arrow = arrow())+ggtitle("elephant sea Trajectory")+xlab("X")+ ylab("Y")+theme_classic()
ggplot(df,aes(x=df$x,y=df$y)+geom_path(aes(group = 1), arrow = arrow(),color="red")+ggtitle("elephant sea Trajectory")+xlab("X")+ ylab("Y")+theme_classic()
ggplot(df,aes(x=df$x,y=df$y)+geom_path(aes(group = 1), arrow = arrow(),color='red')+ggtitle("elephant sea Trajectory")+xlab("X")+ ylab("Y")+theme_classic()
ggplot(df,aes(x=df$x,y=df$y))+geom_path(aes(group = 1), arrow = arrow(),color='red')+ggtitle("elephant sea Trajectory")+xlab("X")+ ylab("Y")+theme_classic()
ggplot(df,aes(x=df$x,y=df$y))+geom_path(aes(group = 1), arrow = arrow(),color='blue')+ggtitle("elephant sea Trajectory")+xlab("X")+ ylab("Y")+theme_classic()
stplot(tracksCollection)
stplot(tracksCollection, scales = list(draw=TRUE))
plot(tracksCollection)
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
?partner
plot(A1)
plot(A2,add=T)
plot(A1,col="red")
plot(A2,add=T,col="blue")
library("rmarkdown", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
render("TrajDataMining.Rmd","TrajDataMining.pdf")
render("vignettes/TrajDataMining.Rmd","TrajDataMining.pdf")
render("vignettes/TrajDataMining.Rmd","pdf_document")
data <- FALSE
partner(A1,A2,110792,2277,0,data)
teste <- partner(A1,A2,110792,2277,0,data)
typeof(teste)
devtools::test()
devtools::use_test()
devtools::check()
library("TrajDataMining", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
library("trajectories", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
library("trajectories", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
devtools::check()
devtools::test()
devtk
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
test_that ("Test owMeratniaByCollection",{
expect_lt(length(owMeratniaByCollection(tracksCollection,13804.84 ,0.03182201)),length(A1))
})
testthat("Test partner",{
data <- FALSE
expect_type(partner(A1,A2,110792,2277,0,data),"list")
})
devtools::use_test()
devtools::test()
devtools::document()
devtools::check(_)
devtools::check()
library("assertthat", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
detach("package:testthat", unload=TRUE)
library("testthat", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
devtools::test
devtools::test()
devtools::test()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtod
devtools::check()
devtools::document()
ggplot(df,aes(x=df$x,y=df$y))+geom_path(aes(group = 1), arrow = arrow(),color='blue')+ggtitle("elephant sea Trajectory")+xlab("X")+ ylab("Y")+theme_classic()
ggplot(df,aes(x=df$x,y=df$y))+geom_path(aes(group = 1), arrow = arrow(),color=class)+ggtitle("elephant sea Trajectory")+xlab("X")+ ylab("Y")+theme_classic()
ggplot(df,aes(x=df$x,y=df$y))+geom_path(aes(group = 1), arrow = arrow())+ggtitle("elephant sea Trajectory")+xlab("X")+ ylab("Y")+theme_classic()+geom_point(color=class())
ggplot(df,aes(x=df$x,y=df$y))+geom_polygon(fill="white",colour="black")
ggplot(df,aes(x=df$x,y=df$y))+geom_polygon(fill="white",colour="black")+ coord_quickmap()
ggplot(df,aes(x=df$x,y=df$y,group=group))+geom_polygon(fill="white",colour="black")+ coord_quickmap()
ggplot(df,aes(x=df$x,y=df$y,group=df))+geom_polygon(fill="white",colour="black")+ coord_quickmap()
ggplot(df,aes(x=df$x,y=df$y))+geom_polygon(fill="white",colour="black")+ coord_quickmap()
ggplot(df,aes(x=df$x,y=df$y))+geom_path(aes(group = 1), arrow = arrow(),color='blue')+ggtitle("elephant sea Trajectory")+xlab("X")+ ylab("Y")+theme_classic()+geom_polygon(fill="white",colour="black")+ coord_quickmap()
plot(df)
df <- data.frame(x=A1@sp@coords[,1],y=A1@sp@coords[,2])
ggplot(df,aes(x=df$x,y=df$y))+geom_path(aes(group = 1), arrow = arrow(),color='blue')+ggtitle("elephant sea Trajectory")+xlab("X")+ ylab("Y")+theme_classic()+geom_polygon(fill="white",colour="black")+ coord_quickmap()
ggplot(df,aes(x=df$x,y=df$y))+geom_polygon(fill="white",colour="black")+ coord_quickmap()
ggplot(df,aes(x=df$x,y=df$y))+geom_polygon(fill="white",colour="black")
ggplot(df,aes(x=df$x,y=df$y))+geom_polygon(fill="white",colour="black")+geom_path(aes(group = 1), arrow = arrow(),color='blue')
plot(A1)
ggplot(df,aes(x=df$x,y=df$y))+geom_polygon(fill="white",colour="black")+geom_path(aes(group = 1), arrow = arrow(),color='blue')
install.packages("sf")
install.packages(c("backports", "curl", "Rcpp"))
install.packages(c("backports", "curl", "Rcpp"))
install.packages(c("backports", "curl", "Rcpp"))
install.packages(c("backports", "curl", "Rcpp"))
install.packages(c("backports", "curl", "Rcpp"))
install.packages("sf")
install.packages("sf")
install.packages("mapview")
library("mapview", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
mapview::breweries
library("sf", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
dsn <- ('/home/asainpe/Área de Trabalho/')
read_sf(dsn,'hurricane.csv')
library("rgdal", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
ogrListLayers(dsn)
teste <- read_sf(dsn,"ESRI Shapefile")
teste <- readOGR(dsn,"ESRI Shapefile")
teste <- readOGR(dsn,"hurricane.csv")
read.csv('/home/asainpe/Área de Trabalho/hurricane.csv',header = TRUE)
teste <- read.csv('/home/asainpe/Área de Trabalho/hurricane.csv',header = TRUE)
plot(teste)
teste$ADV..LAT....LON......TIME.....WIND..PR..STAT
View(teste)
teste <- read.csv('/home/asainpe/Área de Trabalho/hurricane.csv',header = TRUE,sep = ",")
View(teste)
teste <- read.csv('/home/asainpe/Área de Trabalho/hurricane.csv',header = TRUE,sep = " ")
plot(teste$LAT)
plot(teste$LON,add=T)
mapview(teste)
teste <- read_sf('/home/asainpe/Área de Trabalho/hurricane.csv')
teste <- read_sf('/home/asainpe/Área de Trabalho/hurricane.csv',quiet = FALSE)
teste <- read_sf('/home/asainpe/Área de Trabalho/hurricane.csv',quiet = TRUE)
teste <- read.csv('/home/asainpe/Área de Trabalho/hurricane.csv')
teste
teste <- readOGR(dsn,'track')
teste <- readOGR(dsn,'track.dat')
ogrListLayers(dsn)
dsn <- '/home/asapa'
dsn <- '/home/asainpe/Área de Trabalho/apresentação metodologia/'
ogrListLayers(dsn)
dir(dsn)
read.fwf('/home/asainpe/Área de Trabalho/apresentação metodologia/hurricane.csv')
read.fwf('/home/asainpe/Área de Trabalho/apresentação metodologia/hurricane.csv', widths = c(4,6,8,12,4,6,20))
teste <- read.fwf('/home/asainpe/Área de Trabalho/apresentação metodologia/hurricane.csv', widths = c(4,6,8,12,4,6,20))
plot(teste)
teste$V1
View(teste)
mapview(teste)
teste <- read.fwf('/home/asainpe/Área de Trabalho/apresentação metodologia/hurricane.csv', widths = c(4,6,8,12,4,6,20)) %>%View()
library(ggplot2)
teste <- read.fwf('/home/asainpe/Área de Trabalho/apresentação metodologia/hurricane.csv', widths = c(4,6,8,12,4,6,20)) %>%View()
teste <- read.fwf('/home/asainpe/Área de Trabalho/apresentação metodologia/hurricane.csv', widths = c(4,6,8,12,4,6,20))
ggplot(teste,aes(x=teste$V2,y=teste$V3))+ gem_path()
ggplot(teste,aes(x=teste$V2,y=teste$V3))+ geom_path()
ggplot(teste,aes(x=teste$V2,y=teste$V3))+ geom_path(aes(group = 1), arrow = arrow(),color='blue')
install.packages("tidyverse")
teste <- read.fwf('/home/asainpe/Área de Trabalho/apresentação metodologia/hurricane.csv', widths = c(4,6,8,12,4,6,20))
ggplot(teste,aes(x=teste$V2,y=teste$V3))+ geom_path(aes(group = 1), arrow = arrow(),color='blue')
View(teste)
plot(teste$V2)
plot(teste$V3,add=T)
plot(teste$V2)
plot(teste$V2,teste$V3)
readOGR(dsn,"hurricane.csv")
teste2 <- read.csv("/home/asainpe/Área de Trabalho/apresentação metodologia/hurricane.csv",stringsAsFactors = FALSE)
ste(teste2)
str(teste2)
o <- str(teste2)
plot(o)
plot(teste2)
View(teste2)
teste2 <- read.csv("/home/asainpe/Área de Trabalho/apresentação metodologia/hurricane.csv",stringsAsFactors = FALSE,sep = "|")
View(teste2)
teste2$ADV..LAT....LON......TIME.....WIND..PR..STAT
teste2
plot(teste)
names(teste2)
names(teste)
library("tidyverse", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
df <- read_csv('/home/asainpe/Área de Trabalho/apresentação metodologia/hurricane.csv')
df <- read_csv('/home/asainpe/Área de Trabalho/apresentação metodologia/hurricane.csv')
dir(".")
teste2<- read_csv('./hurricane.csv')
teste2 <- st_read("./hurricane.csv")
teste2 <- st_read("./hurricane.csv")
teste2 <- st_read("./hurricane.csv")
df <- read_csv('/home/asainpe/Área de Trabalho/apresentação metodologia/hurricane.csv')
read.csv('./hurricane.csv')
teste3 <- read.csv('./hurricane.csv')
teste3
plot(teste3)
View(teste3)
teste
df <- data.frame(x=(teste$V2),y=(teste$V3))
df
df[,2]
plot(df)
df[1]
df[[2]]
names(teste)
teste <- read.fwf('/home/asainpe/Área de Trabalho/apresentação metodologia/hurricane.csv', widths = c(6,8,12,4,6,20))
teste$V2
View(teste)
teste <- read.fwf('/home/asainpe/Área de Trabalho/apresentação metodologia/hurricane.csv', widths = c(2,6,8,12,4,6,20))
View(teste)
teste <- read.fwf('/home/asainpe/Área de Trabalho/apresentação metodologia/hurricane.csv', widths = c(4,6,8,12,4,6,20))
names(teste)=c("ADV", "LAT", "LON", "TIME", "WIND", "PR", "STAT")
teste
View(teste)
teste$LAT
plot(teste$LAT)
ggplot(teste,aes(x=teste$LAT))+geom_point()
ggplot(teste,aes(x=teste$LAT,y=teste$LON))+geom_point()
ggplot(teste,aes(x=teste$LAT,y=teste$LON))+geom_lines()
ggplot(teste,aes(x=teste$LAT,y=teste$LON))+geom_line()
ggplot(teste,aes(x=teste$LAT,y=teste$LON))+geom_point()
mapview(teste)
st_read('./hurricane.csv')
st_layers('./hurricane.csv')
df <- st_point(c(teste$LAT:teste$LON))
teste$LAT[1]
teste$LAT[2]
teste$LAT[2]
plot(teste$LAT[2])
dsn <- '/home/asainpe/Área de Trabalho/'
dsn <- '/home/asainpe/Área de Trabalho/'
tes <- read_sf('/home/asainpe/Área de Trabalho/al092017-001_5day_pts.shp')
tes <- readOGR(dsn,'al092017-001_5day_pts.shp')
tes <- readOGR(dsn,'al092017-001_5day_pts')
ogrListLayers(dsn)
dsn <- '/home/asainpe/Área de Trabalho/al092017_5day_001/'
ogrListLayers(dsn)
read_sf
read_sf(dsn, "al092017-001_5day_lin")
tes2 <- read_sf(dsn, "al092017-001_5day_lin")
plot(tes2)
mapview(tes2)
tes3 <- readOGR(dsn, "al092017-001_5day_lin")
library("mapview", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
library("rgdal", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
library("spacetime", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
library("tidyverse", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
library("trajectories", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
tes3 <- readOGR(dsn, "al092017-001_5day_lin")
plot(tes3)
tes2 <- read_sf(dsn, "al092017-001_5day_lin")
library("sf", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
tes2 <- read_sf(dsn, "al092017-001_5day_lin")
mapview(tes2)
mapview(tes2)
library("TrajDataMining", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
sf <- read_sf("./inst/extdata/elephant_tracking_40_41.kml")
sf <- read_sf("41: locations")
dsn <- "./inst/"
sf <- read_sf(dsn,"41: locations")
sf <- read_sf("./inst//41: locations")
dsn
dsn <- '/home/asainpe/Área de Trabalho/al092017_5day_001/'
ogrListLayers(dsn)
tes4 <- read_sf(dsn, "al092017-001_5day_pgn")
plot(tes4)
viewmap(tes4)
mapview(tes4)
dsn <- '/home/asainpe/Área de Trabalho/teste2'
ogrListLayers(dsn)
tes4 <- read_sf(dsn, "al112017-001_5day_lin")
mapview(tes4)
ogrListLayers(dsn)
tes4 <- read_sf(dsn, "al112017-011_5day_lin")
View(tes4)
mapview(tes4)
ogrListLayers(dsn)
ogrListLayers(dsn)
tes4 <- read_sf(dsn, "AL112017_052adv_TRACK")
mapview(tes4)
plot(tes4)
tes4
View(tes4)
ogrListLayers(dsn)
tes4 <- read_sf(dsn, "Forecast Track")
plot(tes4)
mapview(tes4)
mapview(tes4)
ogrListLayers(dsn)
tes4 <- read_sf(dsn, "al112017-049A_5day_lin")
mapview(tes4)
ogrListLayers(dsn)
tes3 <- read_sf(dsn, "al112017-048_5day_lin")
mapview(tes3)
st_join(tes4,tes3)
testeeee<- st_join(tes4,tes3)
mapview(testeeee)
st_join(tes3,tes4,join=st_intersects)
teste5 <- st_join(tes3,tes4,join=st_intersects)
mapview(teste5)
dsn
ogrListLayers(dsn)
teste0<- readOGR(dsn,"al112017-048_5day_lin")
View(teste0)
teste0
teste$LAT
teste0@data
teste0@lines
teste0@lines
teste0@lines[,1]
teste0@lines[[1]]
teste0@lines[[1]][,1]
teste0@lines[[1]]
data <- data.frame(ola-=("ola"),tudo=("tudo"))
data <- data.frame(ola=("ola"),tudo=("tudo"))
data$ola
data$tudo
names(data)
View(A1)
library("TrajDataMining", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
View(A1)
library(TrajDataMining)
library("trajectories", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
library("xts", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
library("spacetime", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
library("sp", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
ggplot(df,aes(x=df$x,y=df$y))+geom_path(aes(group = 1), arrow = arrow(),color='blue')+ggtitle("elephant sea Trajectory")+xlab("X")+ ylab("Y")+theme_classic()
df <- data.frame(x=A1@sp@coords[,1],y=A1@sp@coords[,2])
library("ggplot2", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
ggplot(df,aes(x=df$x,y=df$y))+geom_path(aes(group = 1), arrow = arrow(),color='blue')+ggtitle("elephant sea Trajectory")+xlab("X")+ ylab("Y")+theme_classic()
max <- max(A1@connections$distance)
douglasp <- douglasPeucker(A1,max)
df <- data.frame(x=douglasp@sp@coords[,1],y=douglasp@sp@coords[,2])
ggplot(df,aes(x=df$x,y=df$y))+geom_path(aes(group = 1), arrow = arrow(),color='blue')+ggtitle("Method Douglas Peucker")+xlab("X")+ ylab("Y")+theme_classic()
sf <- speedFilter(A1,0.01)
df <- data.frame(x=sf@sp@coords[,1],y=sf@sp@coords[,2])
ggplot(df,aes(x=df$x,y=df$y))+geom_path(aes(group = 1), arrow = arrow(),color='blue')+ggtitle("Method Speed Filter")+xlab("X")+ ylab("Y")+theme_classic()
